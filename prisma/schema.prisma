// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  activities    Activity[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Activity {
  id                  String   
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resourceState       Int
  athleteId           Int?
  athleteResourceState Int?
  name                String
  distance            Float
  movingTime          Int
  elapsedTime         Int
  totalElevationGain  Float
  type                String
  sportType           String
  workoutType         Int?
  startDate           DateTime
  startDateLocal      DateTime
  timezone            String?
  utcOffset           Int?
  locationCity        String?
  locationState       String?
  locationCountry     String?
  achievementCount    Int
  kudosCount          Int
  commentCount        Int
  athleteCount        Int
  photoCount          Int
  mapId               String?
  summaryPolyline     String?
  mapResourceState    Int?
  trainer             Boolean
  commute             Boolean
  manual              Boolean
  private             Boolean
  visibility          String?
  flagged             Boolean
  gearId              String?
  startLat            Float?
  startLng            Float?
  endLat              Float?
  endLng              Float?
  averageSpeed        Float?
  maxSpeed            Float?
  hasHeartrate        Boolean
  averageHeartrate    Float?
  maxHeartrate        Float?
  heartrateOptOut     Boolean
  displayHideHeartrateOption Boolean
  elevHigh            Float?
  elevLow             Float?
  uploadId            BigInt?
  uploadIdStr         String?
  externalId          String?
  fromAcceptedTag     Boolean
  prCount             Int
  totalPhotoCount     Int
  hasKudoed           Boolean
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@id([id, userId])
  @@map("activity")
}